[runtime]
sampler = multinest


[multinest]
max_iterations=50000
live_points=500
multinest_outfile_root=

[test]
save_dir=example_b_output
fatal_errors=T

[output]
filename=example_b.txt
format=text

[pipeline]
modules = consistency camb sigma8_rescale halofit extrapolate_power load_nz linear_alignment shear_shear add_intrinsic 2pt cfhtlens
values = examples/values_b.ini
likelihoods = cfhtlens
extra_output = 
quiet=F
timing=F
debug=F

[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0

[halofit]
file = cosmosis-standard-library/boltzmann/halofit/halofit_module.so

[sigma8_rescale]
file = cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py

[load_nz]
file = cosmosis-standard-library/number_density/load_nz/load_nz.py
filepath = cosmosis-standard-library/likelihood/cfhtlens/combined_nz.txt


[linear_alignment]
file = cosmosis-standard-library/intrinsic_alignments/la_model/linear_alignments_interface.py
method = bk_corrected


[shear_shear]
file = cosmosis-standard-library/shear/spectra/interface.so
ell_min = 20.0
ell_max = 200000.0
n_ell = 225
intrinsic_alignments=T
matter_spectra=F


[add_intrinsic]
file=cosmosis-standard-library/shear/add_intrinsic/add_intrinsic.py


;This Nicaea code converts C_ell into xi(theta).
;It is fast and accurate but requires a high ell_max, as shown above
[2pt]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so


[cfhtlens]
file = cosmosis-standard-library/likelihood/cfhtlens/cfhtlens_interface.py

[extrapolate_power]
file=cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py
kmax=500.0
