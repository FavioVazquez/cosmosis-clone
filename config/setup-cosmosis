# This file must be sourced, so that it can establish the appropriate
# environment for a development session.
# Note: this currently only supports bash

# Detect whether CosmoSIS is already set up; if so, do not repeat the
# setup.
cosmo_cmd=$(type cosmosis 2> /dev/null)
if [ ! -z "$cosmo_cmd" ]
then
  echo CosmoSIS is already set up.
  return 0
fi

# detect COSMOSIS_SRC_DIR
if [ -z "$COSMOSIS_SRC_DIR" ]
then
  cosmosis_dir=$( (builtin cd $( dirname ${BASH_SOURCE[0]}); /bin/pwd) )
  cosmosis_dir=${cosmosis_dir%/config}
  export COSMOSIS_SRC_DIR="$cosmosis_dir"
fi

product_db=`cat $COSMOSIS_SRC_DIR/config/ups`
if [ ! -f "$product_db/setups" ]
then
    echo "The directory $product_db does not appear to contain the UPS products."
    return 1
fi

# initialize UPS
source $product_db/setups
if [ -z "$PRODUCTS" ]
then
    echo "The setup of the UPS system has failed; please ask a local expert for assistance."
    return 1
fi

# Set the library path appropriate for our flavor.
libdir=${COSMOSIS_SRC_DIR}/cosmosis/datablock
flavor=$(ups flavor -1)
if [ "$flavor" = "Darwin64bit" ]
then
    export DYLD_LIBRARY_PATH="${libdir}${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}"
else
    export LD_LIBRARY_PATH="${libdir}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
fi

export PATH=${COSMOSIS_SRC_DIR}/bin:$PATH

# On OS X, we use the Anaconda python we have installed.
if [ "$flavor" == "Darwin64bit" ]
then
  export PATH=${COSMOSIS_SRC_DIR}/conda/bin:$PATH
fi

export PYTHONPATH=${COSMOSIS_SRC_DIR}

# don't allow this as it probably causes problems
# during installation. Maybe support it later as
# an advanced feature
#
# allow user to override our PYTHONUSERBASE
#if [ -z "$PYTHONUSERBASE" ]
#then
export PYTHONUSERBASE=${COSMOSIS_SRC_DIR}
#fi

# setup UPS packages
# We do not use the Python UPS products on OS X.
if [ "$flavor" != "Darwin64bit" ]
then
  setup -B scipy v0_14_0 -q +e7:+prof || die "Failed to setup scipy"
  setup -B pyfits v3_3 -q +e7:+prof || die "Failed to setup pyfits"
  setup -B pyyaml v3_11a || die "Failed to setup pyyaml"
fi

setup -B gsl v1_16 -q +prof || die "Failed to setup gsl"
setup -B fftw v3_3_4 -q +prof || die "Failed to setup fftw"
setup -B cfitsio v3_37_0 -q +prof || die "Failed to setup cfitsio"
setup -B lapack v3_5_0 -q +e7:+prof || diel "Failed to setup lapack"

if [ -d "$SETUPS_DIR/planckdata/v1_1" ]
then
	setup -B planckdata v1_1 || die "Failed to setup planckdata"
fi

if [ -d "$SETUPS_DIR/wmapdata/v5_00" ]
then
	setup -B wmapdata v5_00 || die "Failed to setup wmapdata"
fi

if [ -d "$SETUPS_DIR/minuit2/v5_28_0" ]
then
	setup -B minuit2 v5_34_14 -q +e7:+prof || die "Failed to setup minuit2"
fi

#if [ "$flavor" = "Darwin64bit" ]
mpich_qualified_version="mpich v3_1_2a -q +e7:+prof"
if ups exist $mpich_qualified_version
then
    setup -B $mpich_qualified_version || die "Failed to setup $mpich_qualified_version"
fi

export PS1="(cosmosis) ${PS1:+${PS1}}"
