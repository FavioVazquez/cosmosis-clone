; Demonstrate the different angular two-point functions in the standard library
[runtime]
sampler = test

[test]
save_dir=demo_output_15
fatal_errors=T

[pipeline]
modules = consistency dndz luminosity_slope camb sigma8_rescale halofit_takahashi constant_bias angular_power 2pt_shear 2pt_matter 2pt_ggl 2pt_mag
values = demos/values15.ini
; Not used here, becuase we are not sampling
likelihoods =
extra_output =
quiet=F
debug=T
timing=F

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb)
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0

; new simple module for using sigma8 as an input instead of A_s
; the only parameter required is the file location
[sigma8_rescale]
file = cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py

; Works the same as halofit but uses the Takahashi non-linear correction
[halofit_takahashi]
file = cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so

; Load in a file once at the start when setting up and supply fixed data
; when executed.
[dndz]
file = cosmosis-standard-library/number_density/gaussian_window/gaussian_window.py
z = 1.0
sigma = 0.1


; The magnification spectrum is sensitive to the slope of the luminosity number
; count function.  This module uses a fitting function for the slope alpha.
[luminosity_slope]
file = cosmosis-standard-library/luminosity_function/Joachimi_Bridle_alpha/interface.py
magnitude_limit = 24.0
binned_alpha = T

; Angular power spectrum from 3D power spectrum
; [angular_power]
; file = cosmosis-standard-library/shear/spectra/interface.so
; n_ell = 100
; ell_min = 10.0
; ell_max = 100000.0
; shear_shear = T
; intrinsic_alignments = F
; matter_spectra = T
; ggl_spectra = T
; gal_IA_cross_spectra = F
; mag_gal_cross_spectra = T
; mag_mag = T

[constant_bias]
file = cosmosis-standard-library/bias/constant_bias/constant_bias.py


[angular_power]
file = cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 10.0
ell_max = 100000.0
n_ell = 100
shear-shear = T
position-position = T
magnification-magnification = T
position-shear = T
verbose = T

;other spectra you could switch on, though many of these will need additional
;input P(k) values to be calculated first.
; shear-Intrinsic = T
; intrinsic-Intrinsic = T
; magnification-Position = T
; position-Intrinsic = T
; magnification-Intrinsic = T
; magnification-Shear = T
; shear-Cmbkappa = T
; cmbkappa-Cmbkappa = T
; intrinsic-Cmbkappa = T
; position-Cmbkappa = T

; This module converts angular spectra from c_ell to correlation functions w(theta).
; It is slow and can be a little dodgy at small theta, so if you have a better
; version it would be great if you be happy to add it (or have us add it) to cosmosis
[2pt_shear]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = shear_cl
output_section_name = shear_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 0

[2pt_matter]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = galaxy_cl
output_section_name = galaxy_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 1

[2pt_ggl]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = galaxy_shear_cl
output_section_name = galaxy_shear_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 2

[2pt_mag]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = magnification_cl
output_section_name = magnification_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 1

