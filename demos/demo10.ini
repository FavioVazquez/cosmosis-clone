[runtime]
; changed sampler from test to grid
sampler = grid

[grid]
;parameters for grid are here
;In this case there is one parameter, the number of samples to take 
;in each dimention in which the parameters vary
;This is a reasonable number for a 1D analysis but remember that the
;number of grid points scales very quickly with number of parameters.
nsample_dimension = 60

[pipeline]
; You can use environment variables in these ini files.
; they can be used anywhere, in section names, parameter names, or values.
modules = consistency camb sigma8_rescale ${HALOFIT} load_nz shear_shear 2pt cfhtlens
values = demos/values10.ini

likelihoods = cfhtlens
extra_output = 

; We can get a little more output during the run by setting some values
quiet=F
timing=F
debug=F

;[output] needed for grid sampler 
;tells cosmosis how and where to save liklihood values
[output]
format=text
filename=demo10_output_${HALOFIT}.txt

[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0

; new simple module for using sigma8 as an input instead of A_s
; the only parameter required is the file location
[sigma8_rescale]
file = cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py

;the same halofit module as used in demo 6
[halofit]
file = cosmosis-standard-library/boltzmann/halofit/halofit_module.so

; new module. works the same as halofit but uses the Takahashi non-linear correction
; will be called when the variable HALOFIT = halofit_takahashi
[halofit_takahashi]
file = cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so

; This is an example of a very simple module - it simple loads in 
; a file once at the start when setting up and supplies fixed data
; when executed.
[load_nz]
file = cosmosis-standard-library/number_density/load_nz/load_nz.py
filepath = cosmosis-standard-library/likelihood/cfhtlens/combined_nz.txt

; This module uses the Limber approximation to compute shear-shear C_ell
; given the shear kernel (which is derived from the number density and 
; from geometry)
[shear_shear]
file = cosmosis-standard-library/shear/spectra/interface.so
ell_min = 20.0
ell_max = 10000.0
n_ell = 150
intrinsic_alignments = F

; This module converts shear spectra from c_ell to xi(theta).
; It is slow and can be a little dodgy at small theta, so if you have a better
; version it would be great if you be happy to add it (or have us add it) to cosmosis
[2pt]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so


; The CFHTLens likelihood
[cfhtlens]
file = cosmosis-standard-library/likelihood/cfhtlens/cfhtlens_interface.py

; The consistency module translates between our chosen parameterization
; ; and any other that modules in the pipeline may want (e.g. camb)
; [consistency]
; file = cosmosis-standard-library/utility/consistency/consistency_interface.py

